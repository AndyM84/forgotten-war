def notifyDiscord(versionNumber, buildResult) {
	def desc = "A new FW build has finished, v${versionNumber}: ${buildResult}"
	def title = 'FAILED BUILD'
	def thumbnail = 'https://andymale.com/pictures/cancel.png'

	if (buildResult.equalsIgnoreCase('SUCCESS')) {
		title = 'SUCCESSFUL BUILD'
		thumbnail = 'https://andymale.com/pictures/checkmark.png'
	}

	discordSend(
		description: desc,
		footer: '',
		image: '',
		link: env.BUILD_URL,
		result: buildResult,
		thumbnail: thumbnail,
		title: "FW Build v${versionNumber} Complete",
		webhookURL: 'https://discordapp.com/api/webhooks/690982339051913346/gS6UAfbrCl-2QkqfGJzjI7OMoGyV4hI1abQibUPIrYGBX7EbaFg97vX9R7Hak60QPfbt'
	)
}

def executeBat(cmd) {
	bat cmd
}

def checkFileExists(path) {
	def doesExist = powershell(returnStatus: true, script: """
if (Test-Path -Path ${path}) {
	Exit 1
}

Exit 0
""")

	doesExist
}

properties([
	parameters([
			[$class: 'PersistentStringParameterDefinition', defaultValue: params.serviceName ?: "ForgottenWar", description: 'Name of Windows service to stop/start during deployment', name: 'serviceName', successfulOnly: false]
	])
])

node {
	try {
		stage('Stop Service') {
			executeBat("net stop ${params.serviceName}")
		}
	} catch (e) {
		throw(e)
	}
}